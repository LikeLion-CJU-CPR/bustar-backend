<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="mydb.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2486"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="sqlite_sequence" custom_title="0" dock_id="1" table="4,15:mainsqlite_sequence"/><dock_state state="000000ff00000000fd00000001000000020000023400000217fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000002340000015100ffffff000002340000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="sqlite_sequence" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="44"/><column index="2" value="32"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 2*">SELECT * FROM user;</sql><sql name="SQL 3*">INSERT INTO user (id, name, date, grade) VALUES (
    1,                        -- id: 1 (최초 사용자라 명시적으로 1 지정)
    '김은성',                   -- name
    '2025-08-26',             -- date (가입 날짜)
    '다이아'                  -- grade (초기 등급)
);
-- 2. coupon (쿠폰) 테이블에 데이터 삽입
INSERT INTO coupon (coupon_id, coupon_name, coupon_price, coupon_discount, coupon_affiliate, coupon_period) VALUES
(101, '아이스아메리카노', 2000, 500, '멋사커피', '2025-12-31'),
(102, '콜드브루',        3000, 500, '멋사커피', '2025-12-31'),
(103, '카페라떼',        2500, 500, '멋사커피', '2025-12-31'),
(104, '1000원권',        1000, 100, 'gs편의점', '2025-12-31'),
(105, '3000원권',        3000, 300, 'gs편의점', '2026-06-30'),  -- 6월 31일 → 6월 30일 수정
(106, '5000원권',        5000, 500, 'gs편의점', '2026-06-30'),
(107, '10000원권',      10000, 1000,'gs편의점', '2026-06-30');

-- 3. recent_move (최근 이동 기록) 테이블에 데이터 삽입
INSERT INTO recent_move (root_id, member_id, origin, destination) VALUES (
    1001,                     -- root_id
    1,                        -- member_id (user.id 참조)
    '청주대학교 정문',          -- origin
    '청주시외버스터미널'         -- destination
);


INSERT INTO usage_record (id, total_use, month_use, saved) VALUES (
    1,                        -- user.id 참조
    125,                      -- total_use
    15,                       -- month_use
    50                        -- saved
);

-- 5. point (포인트) 테이블에 데이터 삽입
INSERT INTO point (id, point, use_point, plus_point, total_point) VALUES (
    1,                        -- id (user.id 참조)
    750,                      -- point (현재 보유 포인트)
    250,                      -- use_point (누적 사용 포인트)
    1000,                     -- plus_point (누적 적립 포인트)
    100000                    -- total_point (총 누적 포인트 → 등급 산정 기준)
);

-- 참고:
-- FastAPI의 calculate_grade() API를 호출해야 user.grade가 자동 업데이트됩니다.
-- 단순 SQL 실행만으로는 user.grade가 갱신되지 않습니다.

-- 6. user_coupon (사용자 쿠폰) 테이블에 데이터 삽입
INSERT INTO user_coupon (id, coupon_id, start_period, end_period, use_can, use_finish, finish_period) VALUES (
    1,                        -- user.id 참조
    101,                      -- coupon_id (coupon.coupon_id 참조)
    '2025-08-01',             -- start_period
    '2025-08-31',             -- end_period
    1,                        -- use_can (사용 가능)
    0,                        -- use_finish (미사용)
    0                         -- finish_period (기간 만료 안됨)
);
</sql><sql name="SQL 4*">
DELETE FROM user_coupon;
DELETE FROM point;
DELETE FROM usage_record;
DELETE FROM recent_move;
DELETE FROM coupon;
DELETE FROM user;
</sql><sql name="SQL 5*">-- 업데이트된 SQLite 데이터베이스 테이블 생성 스크립트

PRAGMA foreign_keys = ON;

CREATE TABLE IF NOT EXISTS user (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER,
    phonenumber TEXT,
    date TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS coupon (
    coupon_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price INTEGER NOT NULL,
    discount INTEGER,
    affiliate TEXT,
    period TEXT
);

CREATE TABLE IF NOT EXISTS recent_move (
    root_id INTEGER PRIMARY KEY AUTOINCREMENT,
    member_id INTEGER NOT NULL,
    origin TEXT NOT NULL,
    destination TEXT NOT NULL,
    FOREIGN KEY(member_id) REFERENCES user(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS usage_record (
    id INTEGER PRIMARY KEY,
    total_use INTEGER NOT NULL,
    month_use INTEGER NOT NULL,
    saved INTEGER NOT NULL,
    FOREIGN KEY(id) REFERENCES user(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS point (
    id INTEGER PRIMARY KEY,
    point INTEGER NOT NULL,
    use_point INTEGER,
    plus_point INTEGER,
    total_point INTEGER
    -- FOREIGN KEY(id) REFERENCES user(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_coupon (
    id INTEGER NOT NULL,
    coupon_id INTEGER NOT NULL,
    start_period TEXT,
    end_period TEXT,
    use_can INTEGER NOT NULL,
    use_finish INTEGER NOT NULL,
    finish_period INTEGER NOT NULL,
    PRIMARY KEY(id, coupon_id),
    FOREIGN KEY(id) REFERENCES user(id) ON DELETE CASCADE,
    FOREIGN KEY(coupon_id) REFERENCES coupon(coupon_id) ON DELETE CASCADE
);
</sql><current_tab id="0"/></tab_sql></sqlb_project>
